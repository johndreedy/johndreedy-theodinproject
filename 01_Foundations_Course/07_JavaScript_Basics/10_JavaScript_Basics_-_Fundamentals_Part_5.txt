* Objects are a VERY important part of the JavaScript language!

* While for the most part you can accomplish simple tasks without them, any real project is going to feature Objects.

* They can get deep quickly, so this will cover the basics.

* JAVASCRIPT.INFO ARTICLE - OBJECTS *

* There are 8 data types in JS, as we know, with 7 being primitive (only containing a single thing)

* On the contrary, objects are used to store keyed collections of data and more complex entities

* Objects penetrate almost every aspect of JS, so we must understand them first before doing anything else

* An object can be created with {}, with an optional list of properties

* The property is a "key: value" pair, the key being a string and the value being anything

* An object is like a cabinet with signed files, with keys to find them

An empty object can be created using two syntaxes:

    let user = new Object(); // "object constructor"

Or

    let user = {}; // "object literal"


* Literals and properties *

    let user = {
        name: "John",
        age: 30
    }

The key is before the colon to the right of the value.

We can add, remove, or read files from these keys at any time, using dot notation.

    alert( user.name );
    alert( user.age );

You can add a value of any type, such as a boolean:

    user.isAdmin = true;

To remove a property you can use the delete operator:

    delete user.age;

You can use multiword names for properties, but they must be quoted:

    let user = {
        name: "John",
        age: 30,
        "likes birds": true
    }

The last property can end with a comma.

* Square brackets *

Dot access does not work for multiword properties, as you need the key to be a valid variable identifier.
That means no spaces, starting with digits, and no special characters.

Instead there is a square bracket notation that works with any string.

    let user = {};

    user["likes birds"] = true;

    alert(user["likes birds"]);

    delete user["likes birds"];

Now everything is fine.

Square brackets are also used to provide a way to obtain the property name as a result of an expression.

    let key = "likes birds";
    user[key] = true;

key may be caulcated at run-time or depend on user input.

    let user = {
        name: "John",
        age: 30
    };

    let key = prompt("What do you want to know about the user?", "name")

    alert( user[key] );

Dot notation cannot be used in a similar way like alert( user.key )

* Computed properties *

We can use square brackets in an object literal when creating an object.

    let fruit = prompt("Which fruit to buy?", "apple");

    let bag = {
        [fruit]: 5,
    };

    alert( bag.apple );

This works the same as...

    let fruit = prompt("Which fruit to buy?", "apple");
    let bag = {};

    bag[fruit] = 5; // print 5 if fruit is "apple"

We can use more complex expressions inside square brackets as well.

    let fruit = 'apple';
    let bag = {
        [fruit + 'Computers']: 5 // bag.appleComputers = 5
    };

If the property name is fairly simple, it is generally better to use dot notation.

* Property value shorthand *

In real code we use existing variables as values.

    function makeUser (name, age) {
        return {
            name: name,
            age: age,
        };
    }

    let user = makeUser("John", 30);
    alert(user.name);

In this instance, the properties (or values) have the same names as variables.
There is a special property value shorthand for this.

    function makeUser (name, age) {
        return {
            name,
            age,
        };
    }

* Property name limitations *

Usually a variable cannot have a name equal to one of the language-reserved words (for, let, return).

But an object property has no restrictions.

    let obj = {
        for: 1,
        let: 2,
        return: 3
    };

    alert( obj.for + obj.let + obj.return );

All other types are also converted to strings (0 and "0" are used interchangably).

There is also __proto__ which will be covered later.

* Property existence test, "in" operator *

Compared to other languages, it is possible to access any property.
There will be no error, even if the property doesn't exist.

    let user = {};
    alert ( user.noSuchProperty === undefined );

There is also the operator "in".

    "key" in object

Or

    let user = { name: "John", age: 30 };
    
    alert( "age" in user ); // true
    alert( "blabla" in user ); // false

There must be a property name on the left side of "in".

But isn't it enough to compare against undefined?
Actually not, because an object property can exist and also store undefined.

However this is generally very uncommon.

* "For..in" loop *

To loop through all keys of an object, you use for..in, which is very different syntax to for(;;)

    let user = {
        name: "John",
        age: 30,
        isAdmin: true
    };

    for (let key in user) {
        alert( key );
        alert( user[key] );
    }

* Object order when looping

Are objects ordered? If we loop over an object, are indexes set in the order they are addded?

Not quite - they are ordered in a special fashion.
Integers are sorted first numerically, and others appear in creation order.

    let codes = {
        "49": "Germany",
        "41": "Switzerland",
        "44": "Great Britain",
        "1": "USA"
    };

    for (let code in codes) {
       alert(code); // 1, 41, 44, 49
    } 

If keys are non-integers, they are listed in creation order.

If we want to change integers to be shown in creation order, we can make the codes non-integer.

    for (let code in codes) {
         alert ( +code ); // 49, 41, 44, 1

* THE ODIN PROJECT - Advanced array magic *

* Arrays also have a set of functions for manipulating data in powerful ways.

As an example of what we mean, letâ€™s consider a sumOfTripledEvens function. It will:

1. Take in an array.
2. For every even number, it will triple it.
3. Then it will sum all those even numbers.

In pseudocode:

1. Take in an array as an argument
2. Loop through that array
3. If the array element % (mod) 2 equals 0, it is even
4. Access that element in the array and triple it
5. Add that number to new array sumEven
5. Else, skip array element

    numberSequence = [1,2,3,4,5,6];

    function sumOfTripledEvens (array) {

    sumArray = 0;

        for (i=0; i < array.length; i++) {
            if (array[i] % 2 == 0) {
                sumArray += (array[i] * 3);
            }
        }

        return sumArray;
    }

    sumOfTripledEvens(numberSequence);

This works, however it's possible to make the function even more concise and readable.

* The map method

map expects a callback as an argument, ie. passing another function into an argument of my function

For example, if we want to add one to every element of an array of integers:

    function addOne
        return num + 1;
    }
    const arr = [1, 2, 3, 4, 5];
    arr.map(addOne);

Or even more simple:

    const arr = [1, 2, 3, 4, 5];
    arr.map((num) => num + 1);

* The filter method

filter is similar to map.

It iterates through the array and applies the callback, but instead returns the original value of the array if the callback returns true.

    arr.filter(isOdd); // [1, 3, 5]

* The reduce method

If we wanted to multiply every integer in an array, we would declare a variable called total (equal to 1)
Then we would iterate through the array with a for loop and multiply total by the current number.

There is a simpler way however, called reduce.
reduce expects a callback function similar to .map() and .filter()

- Different to the others, reduce also expects two arguments instead of one.
The first is the accumulator, i.e. the total.  If no initialValue is provided, the first element of the array is used to begin with.

- It also takes an initialValue as a second argument, when we don't want our initial value to be the first array element.

    const arr = [1, 2, 3, 4, 5];
    arr.reduce((total, currentItem) => total * currentItem, 1); // 120

Here we pass a callback function (total, currentItem) => total * currentItem and then initialise 1 as the second argument.

.reduce() goes through every element in arr and applies the callback function to it, changing the total without changing the array.