* Will eventually need to ask questions - conversations or with colleagues
* In programming it's essential to ask well-formed questions; help others help you

* Discord
* Stack Overflow
* Work

1. Always provide context about what problem you're trying to solve / the project

2. Ask about the problem rather than the solution
	- For example, instead of "how do I solve question 5" you outline what question 5 is
	- Will share new things instead of what hasn't worked
	- Important to show you've already tried, unless you're stuck where to start

3. Don't take them asking for more info to heart
	- An expert doesn't want to send you down the wrong path

* Reading materials, etc

From Gordon Zhu on Medium:

1. Understand the code the best you can before asking
	- Go line-by-line, taking notes
	- Google unfamiliar concepts
	- Use a debugger

2. Explain the context of the problem you're trying to solve
	- The exact steps you took
	- What you expect to see
	- What you actually see

3. Provide the specific code that illustrates the problem
	- Preserve the code so it doesn't change by the time it's looked at

4. Make sure you can reproduce the problem in your code

5. Good code formatting

6. Look for typos (don't misspell stuff)

7. Explain what you already did and your hypotheses

8. Provide your best guess at the problem

9. Proofread that your question is legible and makes sense
	- Edit for clarity

10. Send updates, remember it won't be your last question
	- Post the answer if you find it!
	- Remember that their answer might not be right

Assignment

1. One thing your question should always include is context about exactly what it is 
you're trying to achieve, rather than just code that you have written

2. The "XY Problem" is when you ask a question about the solution to your problem
instead of the problem at hand. For example wanting to truncate a string to get
rid of a file extension instead of realising that many file extensions have different lengths.

3. Three attributes of a "help vampire" are:
	- They are unwilling to look at your documentation or resources
	- They don't put the effort into critically thinking about the problem more 
	  before asking a question
	- They ask impossible questions which aren't worth explaining, eg. "how do I build a forum?"